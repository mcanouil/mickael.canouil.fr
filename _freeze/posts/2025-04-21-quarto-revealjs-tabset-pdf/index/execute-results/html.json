{
  "hash": "c0e1fba95604d9eaf07f6667a37b6fe2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto: Unleash Dynamic Tabset Navigation & Polished PDF Exports\"\ndescription: |\n  Discover how to supercharge your Quarto presentations with interactive tabset navigation in Reveal.js and create stunning, professional PDFs.\n  Get ready to dazzle your audience!\ndate: \"2025-04-21\"\ncategories: [Quarto, Reveal.js, PDF, Presentations, Decktape]\nimage: featured.gif\nimage-alt: |\n  Illustration showing Quarto Reveal.js presentation with tabset navigation.\ntoc-depth: 5\nengine: knitr\nfilters:\n  - include-code-files\ncode-links:\n  - text: Default Quarto Reveal.js\n    icon: file-code\n    href: assets/_demo-default.qmd\n  - text: Tabset Quarto Reveal.js\n    icon: file-code\n    href: assets/_demo-default.qmd\n  - text: Tabset JavaScript\n    icon: file-code\n    href: assets/revealjs-tabset.html\nresources:\n  - assets/revealjs-tabset.html\n  - assets/_demo-default.qmd\n  - assets/_demo-default.html\n  - assets/_demo-default.pdf\n  - assets/_demo-tabset.qmd\n  - assets/_demo-tabset.html\n  - assets/_demo-tabset.pdf\n---\n\n## Introduction\n\nCreating presentations with Quarto's Reveal.js  format comes with great flexibility, but navigating tabsets and exporting polished PDFs can be challenging.\n\nIn this post, you'll learn how to streamline these tasks, making your workflow smoother and ensuring your slides are both interactive and well-formatted for sharing.\nWith the right techniques, you can:\n\n1. Craft slides with tabset navigation that flows as naturally as your ideas.\n2. Transform your interactive presentations into sleek, professionally polished PDFs.\n\nLet's dive in and start elevating your slide game!\n\n## Setting Up the Presentation\n\nLet's kick off by creating a basic Reveal.js presentation with the essential YAML header.\n\n```{.yaml include=\"assets/_demo-default.qmd\" start-line=2 end-line=7}\n```\n\n## Structuring Your Content\n\nBreak free from linear storytelling by organising your slides into engaging segments.\nUse the `.panel-tabset` class in your markdown content to create a dynamic, tabbed interface that keeps your audience on the edge of their seats:\n\n```{.markdown include=\"assets/_demo-default.qmd\" start-line=10 end-line=40 shortcodes=\"false\"}\n```\n\n## Default Navigation Limitations\n\nOut of the box, Quarto's default configuration requires a manual click on every tab—a small, yet frustrating interruption in the flow of your presentation.\nImagine having to constantly click through your content when you could be gliding from idea to idea!\n\n\n\n```{.bash}\nquarto render assets/_demo-default.qmd\n```\n\n{{< revealjs \"assets/_demo-default.html\" full-screen-link=\"false\" >}}\n\n## Enhanced Tabset Navigation\n\nWhat if you could navigate through your tabs with the fluid grace of arrow keys? Inspired by [Emil Hvitfeldt](https://github.com/EmilHvitfeldt/)'s [Slidecraft 101: Fragments - JS](https://emilhvitfeldt.com/post/slidecraft-fragment-js/#tabset-advance), I've taken tabset navigation to the next level with a custom JavaScript solution.\n\nHere's how you can make your presentation navigation as smooth as silk:\n\n1. **Create a Custom JavaScript stored as an HTML file.**  \n   Save[^1] the following code snippet in an HTML file.\n   This script leverages Reveal.js's fragment feature to enable arrow key navigation, letting you effortlessly glide between your tabs as if they were different slides.\n\n   ```{.html include=\"assets/revealjs-tabset.html\" start-line=25 end-line=63}\n   ```\n\n2. **Embed the Script in Your YAML Header.**  \n   Integrate this new functionality by including the script in your Quarto presentation's YAML header:\n\n   ```{.yaml include=\"assets/_demo-tabset.qmd\" start-line=2 end-line=10}\n   ```\n\n[^1]: Or download the file directly using the link under the table of contents.\n\n\n\nRender your updated slides and experience a newfound freedom in navigation:\n\n```{.bash}\nquarto render assets/_demo-tabset.qmd\n```\n\nNow, simply use the left and right arrow keys to seamlessly transition between tabs—it's like your presentation has its own rhythm!\n\n{{< revealjs \"assets/_demo-tabset.html\" full-screen-link=\"false\" >}}\n\n## Exporting to PDF\n\nTo export your presentation to PDF, you can use the [`decktape` tool](https://github.com/astefanutti/decktape), which is a headless Chrome utility for capturing web pages as PDFs.\n\nYour interactive masterpiece deserves to be preserved. With the [`decktape` tool](https://github.com/astefanutti/decktape), you can convert your dynamic Reveal.js  slides into a beautifully formatted PDF that retains every engaging detail and nuance of your presentation.\n\n1. Install `decktape` using [`npm`](https://www.npmjs.com/):\n\n   ```{.bash filename=\"bash\"}\n   npm install -g decktape\n   ```\n\n2. Use the following command to generate a PDF from your Reveal.js presentation:\n\n   ```{.bash filename=\"bash\"}\n   npx -y decktape reveal \\\n     --chrome-arg=--no-sandbox \\\n     --chrome-arg=--disable-setuid-sandbox \\\n     --fragments \\\n     \"my-slides.html\" \"my-slides.pdf\"\n   ```\n\nThis command ensures every fragment and tab is captured in the PDF, preserving the aesthetic and functionality of your presentation.\n\n\n\n:::: {layout-ncol=\"2\"}\n\n#### Default Quarto Reveal.js {.unnumbered .unlisted}\n\n{{< pdf \"assets/_demo-default.pdf\" download-link=\"false\" >}}\n\n#### Tabset Quarto Reveal.js {.unnumbered .unlisted}\n\n{{< pdf \"assets/_demo-tabset.pdf\" download-link=\"false\" >}}\n\n:::\n\n## Conclusion\n\nBy blending Quarto's interactive Reveal.js tabset navigation with the crisp sophistication of PDF exports, you're not merely creating presentations—you're crafting immersive experiences.\nWhether delivered live or shared as a document, your slides will captivate and inspire.\n\nAnd now, instead of wrestling with LaTeX or Typst and losing your hard-earned theming, you can focus entirely on refining your content and delivering a presentation that truly shines.\n\nElevate your storytelling and let your slides speak volumes!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}