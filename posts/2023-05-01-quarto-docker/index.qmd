---
title: "Quarto Q&A: How to publish your document/book/website as a Docker container?"
description: |
  In this blog post of the "Quarto Q&A" series you will learn the steps/principles
  to publish your Quarto project as a Docker container.
date: "2023-05-01"
categories: [Quarto, Q&A, Docker]
image: featured.png
image-alt: |
  Screenshot of an html rendered by Quarto. It contains Quarto MathJax as a title, followed by an equation of rank bold upper sigma.
code-annotations: hover
---

A new blog post of the "Quarto Q&A" series.  
This time, I will show how to publish your Quarto project as a Docker container as light as possible.

## The Question/Problem

There are different ways to publish your Quarto project, either if is a document, a book or a website:

- [Quarto Pub](https://quarto.org/docs/publishing/quarto-pub.html),
- [GitHub Pages](https://quarto.org/docs/publishing/github-pages.html),
- [Posit Connect](https://quarto.org/docs/publishing/rstudio-connect.html),
- [Netlify](https://quarto.org/docs/publishing/netlify.html),
- [Confluence](https://quarto.org/docs/publishing/confluence.html).

But what if you want to publish your Quarto project as a Docker container? As an app?

## The Answer/Solution

Again, there are several ways to do it, but I will show you the steps/principles to publish your Quarto project as a Docker container as light as possible.
To do so, I will use a Dockerfile with staged builds.

### `renv` (<https://rstudio.github.io/renv/>)

1. Create a website using the Quarto CLI and add a code cell to the `about.qmd` file that uses the `palmerpenguins` R package.

   ```bash
   quarto create-project --type website:blog mywebsite
   cd mywebsite
   echo -e '\n```{r}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(penguins) +\n  aes(x = bill_length_mm, y = bill_depth_mm) +\n  geom_point(aes(colour = species)) +\n  geom_smooth(method = "lm", se = FALSE)\n```' >> about.qmd
   ```

2. Setup `renv` and snapshot the dependencies in the `_dependencies.R` file.
   See [`renv` documentation](https://rstudio.github.io/renv/articles/renv.html#snapshotting-dependencies) for more information on snapshotting dependencies.:

   ```bash
   echo -e 'library(knitr)\nlibrary(rmarkdown)\nlibrary(ggplot2)\nlibrary(palmerpenguins)' >> _dependencies.R
   Rscript --vanilla -e 'install.packages("renv")' -e "renv::init()"
   Rscript --vanilla -e "renv::hydrate()" -e "renv::snapshot()"
   ```

3. The Dockerfile for `renv`.  
   Here, I added "build arguments" (_i.e._, `ARGS`) to specify the [Quarto](https://quarto.org/), the [rig](https://github.com/r-lib/rig) and the R versions.

   ```dockerfile
   ARG QUARTO_VERSION="1.3.340"

   FROM ghcr.io/quarto-dev/quarto:${QUARTO_VERSION} AS builder             # <1>

   ARG RIG_VERSION="latest"
   ARG R_VERSION="release"
   COPY install-rig.sh /tmp/install-rig.sh
   RUN bash /tmp/install-rig.sh "${RIG_VERSION}"                           # <2>
   RUN rig add ${R_VERSION} && Rscript -e 'pak::pkg_install("renv")'       # <3>

   COPY mywebsite /app                                                     # <4>
   WORKDIR /app
   RUN Rscript -e "renv::restore()"
   RUN quarto render .                                                     # <5>

   FROM httpd:alpine                                                       # <6>
   COPY --from=builder /app/_site/ /usr/local/apache2/htdocs/              # <7>
   ```
   1. The base Docker image use to be the builder, here it is the Quarto image which is Ubuntu based image with Quarto pre-installed.  
      The `builder` stage is used to install the `rig` and the specified R version, and to render the website.
   2. The `install-rig.sh` script is used to install the `rig` software.
   3. Using `rig`, we add the specified R version and install the `renv` package.
   4. We copy the Quarto project into the `/app` directory of the builder.
   5. We restore the `renv` environment and render the website.
   6. The second and last stage is the `httpd:alpine` image which is a light image with Apache pre-installed.  
   7. We copy the rendered website from the `builder` to the `/usr/local/apache2/htdocs/` directory of the second stage.

4. Build the Docker image from the `Dockerfile`:

   ```bash
   docker buildx build \
     --platform "linux/amd64" \                                            # <1>
     --build-arg QUARTO_VERSION=1.3.340 \                                  # <2>
     --tag "mywebsite:1.0.0" \                                             # <3>
     .
   ```
   1. We specify the platform to build the image for.
   2. We specify the Quarto version to use during the build.
   3. We tag the image with the name `mywebsite` and the version `1.0.0`.
      This is useful to be able to identify the image later.

5. Share the image with others[^1] or deploy it locally:

   ```bash
   docker container run \
     --detach \                                                            # <1>
     --platform "linux/amd64" \                                            # <2>
     --name mywebsite \                                                    # <3>
     --publish 8080:80 \                                                   # <4>
     mywebsite:1.0.0                                                       # <5>
   ```
   1. We run the container in detached mode.
   2. We specify the platform to define the architecture of the container, thus the image to use.
   3. We name the container `mywebsite`, to ease identification.
   4. We publish the port `8080` of the host to the port `80` of the container.
      This is useful to be able to access the website from the host.
   5. We specify the image to use.

6. View the website locally at <http://localhost:8080>.

### `pak` (<https://pak.r-lib.org/>)

1. Create a website using the Quarto CLI and add a code cell to the `about.qmd` file that uses the `palmerpenguins` R package:

   ```bash
   quarto create-project --type website:blog mywebsite && cd mywebsite || exit
   echo -e '\n```{r}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(penguins) +\n  aes(x = bill_length_mm, y = bill_depth_mm) +\n  geom_point(aes(colour = species)) +\n  geom_smooth(method = "lm", se = FALSE)\n```' >> about.qmd
   ```

2. Setup `pak` `lockfile` (see [`pak` documentation](https://pak.r-lib.org/reference/index.html#lock-files) for more information on snapshotting dependencies):

   ```bash
   Rscript --vanilla -e 'install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s", .Platform$pkgType, R.Version()$os, R.Version()$arch))'
   Rscript --vanilla -e 'pak::lockfile_create(c("knitr", "rmarkdown", "ggplot2", "palmerpenguins"))'
   ```

3. The Dockerfile for `pak`.  
   Here, I added "build arguments" (_i.e._, `ARGS`) to specify the [Quarto](https://quarto.org/), the [rig](https://github.com/r-lib/rig) and the R versions.

   ```dockerfile
   ARG QUARTO_VERSION="1.3.340"
   
   FROM ghcr.io/quarto-dev/quarto:${QUARTO_VERSION} AS builder             # <1>
   
   ARG RIG_VERSION="latest"
   ARG R_VERSION="release"
   COPY install-rig.sh /tmp/install-rig.sh
   RUN bash /tmp/install-rig.sh "${RIG_VERSION}"                           # <2>
   RUN rig add ${R_VERSION}                                                # <3>
   
   COPY mywebsite /app                                                     # <4>
   WORKDIR /app
   RUN Rscript -e "pak::lockfile_install()" && quarto render .             # <5>
   
   FROM httpd:alpine                                                       # <6>
   COPY --from=builder /app/_site/ /usr/local/apache2/htdocs/              # <7>
   ```
   1. The base Docker image use to be the builder, here it is the Quarto image which is Ubuntu based image with Quarto pre-installed.  
      The `builder` stage is used to install the `rig` and the specified R version, and to render the website.
   2. The `install-rig.sh` script is used to install the `rig` software.
   3. Using `rig`, we add the specified R version which already includes `pak`.
   4. We copy the Quarto project into the `/app` directory of the builder.
   5. We restore the `pak` `lockfile` and render the website.
   6. The second and last stage is the `httpd:alpine` image which is a light image with Apache pre-installed.  
      We copy the rendered website from the `builder` to the `/usr/local/apache2/htdocs/` directory of the second stage.

4. Build the Docker image from the `Dockerfile`:

   ```bash
   docker buildx build \
     --platform "linux/amd64" \                                            # <1>
     --build-arg QUARTO_VERSION=1.3.340 \                                  # <2>
     --tag "mywebsite:1.0.0" \                                             # <3>
     .
   ```
   1. We specify the platform to build the image for.
   2. We specify the Quarto version to use during the build.
   3. We tag the image with the name `mywebsite` and the version `1.0.0`.
      This is useful to be able to identify the image later.

5. Share the image with others[^1] or deploy it locally:

   ```bash
   docker container run \
     --detach \                                                            # <1>
     --platform "linux/amd64" \                                            # <2>
     --name mywebsite \                                                    # <3>
     --publish 8080:80 \                                                   # <4>
     mywebsite:1.0.0                                                       # <5>
   ```
   1. We run the container in detached mode.
   2. We specify the platform to define the architecture of the container, thus the image to use.
   3. We name the container `mywebsite`, to ease identification.
   4. We publish the port `8080` of the host to the port `80` of the container.
      This is useful to be able to access the website from the host.
   5. We specify the image to use.

6. View the website locally at <http://localhost:8080>.

[^1]: Add the `--push` flag to the `docker buildx build` command to push the image to a registry.  
Assuming you have access to the registry (`docker login`), you can then share the image with others.
