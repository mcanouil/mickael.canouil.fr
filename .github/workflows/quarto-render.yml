name: Quarto Render

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Quarto version'
        required: true
        default: 'pre-release'
        type: string
  pull_request:
  schedule:
    - cron: 00 12 1 * *

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  quarto-render:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4

      - if: ${{ github.event_name == 'pull_request' }}
        uses: r-lib/actions/pr-fetch@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages:
            any::knitr
            any::rmarkdown
            any::downlit
            any::xml2
            any::webshot2

      - name: Set Quarto Version
        id: quarto-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=pre-release" >> $GITHUB_OUTPUT
          fi

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: ${{ steps.quarto-version.outputs.version }}

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Render Quarto Project
        shell: bash
        run: |
          [ ! -f _quarto.yml ] && echo -e "project:\n  output-dir: _site" > _quarto.yml
          if grep -q "output-dir: _site" _quarto.yml; then
            quarto render
          else
            quarto render --output-dir _site
          fi

      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        shell: bash
        run: |
          echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Git Config
        shell: bash
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com'

      - name: Commit to Pull Request
        shell: bash
        run: |
          git add _site
          git add _freeze
          git commit -m 'ci: quarto automatic render


          skip-checks: true' || echo "No changes to commit"

      - name: Create Pull Request
        if: ${{ github.event_name != 'pull_request' }}
        id: create-pr
        env:
          BRANCH: ci/latest-quarto-updates
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        shell: bash
        run: |
          if git show-ref --quiet refs/heads/${BRANCH}; then
            echo "Branch ${BRANCH} already exists."
            git checkout "${BRANCH}"
          else
            echo "Branch ${BRANCH} does not exist. Creating..."
            git checkout -b "${BRANCH}"
          fi
          git push --force origin ${BRANCH}
          PR_URL=$(gh pr create \
            --title "ci: quarto automatic render" \
            --body "GitHub Actions: ${{ github.workflow }} (${{ github.workflow_sha }})" \
            --base "main" \
            --label "Type: CI/CD :robot:" \
            --head "${BRANCH}" \
            --repo ${{ github.repository }} \
            --assignee "${{ github.actor }}" \
            --reviewer "${{ github.actor }}")
          echo "pr-url=${PR_URL}" >> $GITHUB_OUTPUT

      - name: Push to Pull Request
        if: ${{ github.event_name == 'pull_request' }}
        uses: r-lib/actions/pr-push@v2
        with:
          repo-token: ${{ steps.app-token.outputs.token }}

      - name: Workflow Summary
        if: always()
        shell: bash
        run: |
          echo "# Quarto Render Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quarto Version:** ${{ steps.quarto-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Workflow Status" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **Status:** Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "## Pull Request Actions" >> $GITHUB_STEP_SUMMARY
            echo "- Rendered Quarto project" >> $GITHUB_STEP_SUMMARY
            echo "- Committed changes to PR branch" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Actions Taken" >> $GITHUB_STEP_SUMMARY
            echo "- Rendered Quarto project" >> $GITHUB_STEP_SUMMARY
            echo "- Created/updated branch: \`ci/latest-quarto-updates\`" >> $GITHUB_STEP_SUMMARY
            if [ -n "${{ steps.create-pr.outputs.pr-url }}" ]; then
              echo "- Created pull request: [${{ steps.create-pr.outputs.pr-url }}](${{ steps.create-pr.outputs.pr-url }})" >> $GITHUB_STEP_SUMMARY
            else
              echo "- Updated existing pull request for automatic updates" >> $GITHUB_STEP_SUMMARY
            fi
          fi
