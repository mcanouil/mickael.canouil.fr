name: Update Pull Request

on:
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number }}
  cancel-in-progress: true

jobs:
  update-pr:
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
        github.event.comment.user.login == github.repository_owner &&
        startsWith(github.event.comment.body, '/update-pr')
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}

      - name: Get GitHub App User ID
        id: get-user-id
        if: ${{ steps.app-token.outputs.app-slug != '' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
        run: |
          echo "user-id=$(gh api "/users/${APP_SLUG}[bot]" --jq .id)" >> "${GITHUB_OUTPUT}"

      - name: Configure Environment for Git User
        env:
          APP_SLUG: ${{ steps.app-token.outputs.app-slug }}
          USER_ID: ${{ steps.get-user-id.outputs.user-id }}
        run: |
          if [ -z "${APP_SLUG}" ]; then
            USER_NAME="github-actions[bot]"
            USER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
          else
            USER_NAME="${APP_SLUG}[bot]"
            USER_EMAIL="${USER_ID}+${APP_SLUG}[bot]@users.noreply.github.com"
          fi
          git config --global user.name "${USER_NAME}"
          git config --global user.email "${USER_EMAIL}"

      - name: Get Pull Request Details
        id: pr-details
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          PR_DATA=$(gh pr view ${ISSUE_NUMBER} --json headRefName,baseRefName --repo ${GITHUB_REPOSITORY})
          HEAD_REF=$(echo "${PR_DATA}" | jq -r .headRefName)
          BASE_REF=$(echo "${PR_DATA}" | jq -r .baseRefName)

          echo "head-ref=${HEAD_REF}" >> "${GITHUB_OUTPUT}"
          echo "base-ref=${BASE_REF}" >> "${GITHUB_OUTPUT}"

      - name: Checkout PR Branch
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.pr-details.outputs.head-ref }}
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - name: Update PR Branch with Base Branch
        id: merge
        env:
          BASE_REF: ${{ steps.pr-details.outputs.base-ref }}
        run: |
          git fetch origin "${BASE_REF}"
          git restore --source="${BASE_REF}" _site
          git add _site
          
          if git merge "origin/${BASE_REF}" --no-edit -X ours; then
            echo "merge-status=success" >> "${GITHUB_OUTPUT}"
            echo "Merge completed successfully"
          else
            if git diff --name-only --diff-filter=U | grep -q .; then
              CONFLICTS=$(git diff --name-only --diff-filter=U)
              echo "merge-status=conflict" >> "${GITHUB_OUTPUT}"
              echo "conflicts<<EOF" >> "${GITHUB_OUTPUT}"
              echo "${CONFLICTS}" >> "${GITHUB_OUTPUT}"
              echo "EOF" >> "${GITHUB_OUTPUT}"
              git merge --abort
              exit 1
            else
              echo "merge-status=success" >> "${GITHUB_OUTPUT}"
            fi
          fi
          git commit --amend --no-edit || echo "No changes to _site"

      - name: Push Updated Branch
        if: ${{ steps.merge.outputs.merge-status == 'success' }}
        env:
          HEAD_REF: ${{ steps.pr-details.outputs.head-ref }}
        run: |
          git push origin "${HEAD_REF}"

      - name: Update Comment on Success
        if: ${{ steps.merge.outputs.merge-status == 'success' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          COMMENT_ID: ${{ github.event.comment.id }}
          BASE_REF: ${{ steps.pr-details.outputs.base-ref }}
          ORIGINAL_BODY: ${{ github.event.comment.body }}
        run: |
          gh api \
            --method PATCH \
            /repos/${GITHUB_REPOSITORY}/issues/comments/${COMMENT_ID} \
            -f body="${ORIGINAL_BODY}

          ---

          ✅ Successfully updated PR branch with \`${BASE_REF}\` (keeping all \`_site\` changes from base branch)"

      - name: Update Comment on Conflict
        if: ${{ failure() && steps.merge.outputs.merge-status == 'conflict' }}
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          COMMENT_ID: ${{ github.event.comment.id }}
          BASE_REF: ${{ steps.pr-details.outputs.base-ref }}
          CONFLICTS: ${{ steps.merge.outputs.conflicts }}
          ORIGINAL_BODY: ${{ github.event.comment.body }}
        run: |
          gh api \
            --method PATCH \
            /repos/${GITHUB_REPOSITORY}/issues/comments/${COMMENT_ID} \
            -f body="${ORIGINAL_BODY}

          ---

          ❌ Unable to automatically update PR branch with \`${BASE_REF}\` due to conflicts.

          **Conflicting files:**
          \`\`\`
          ${CONFLICTS}
          \`\`\`

          Please update the PR branch manually by running:
          \`\`\`bash
          git fetch origin ${BASE_REF}
          git merge origin/${BASE_REF}
          # Resolve conflicts
          git add .
          git commit
          git push
          \`\`\`"

      - name: Workflow Summary
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
          MERGE_STATUS: ${{ steps.merge.outputs.merge-status }}
          BASE_REF: ${{ steps.pr-details.outputs.base-ref }}
          HEAD_REF: ${{ steps.pr-details.outputs.head-ref }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          (
            echo "# Update Pull Request Workflow Summary"
            echo ""
            echo "## Configuration"
            echo "- **Event:** ${GITHUB_EVENT_NAME}"
            echo "- **Repository:** ${GITHUB_REPOSITORY}"
            echo "- **PR Number:** ${ISSUE_NUMBER}"
            echo "- **Head Branch:** ${HEAD_REF}"
            echo "- **Base Branch:** ${BASE_REF}"
            echo ""
            echo "## Workflow Status"
          ) >> ${GITHUB_STEP_SUMMARY}
          if [ "${JOB_STATUS}" == "success" ]; then
            (
              echo "✅ **Status:** Success"
              echo ""
              echo "## Actions Taken"
              echo "- Merged \`${BASE_REF}\` into \`${HEAD_REF}\`"
              echo "- Kept all changes from \`${BASE_REF}\` in \`_site\` directory"
              echo "- Pushed updated branch to remote"
            ) >> ${GITHUB_STEP_SUMMARY}
          else
            (
              echo "❌ **Status:** Failed"
              echo ""
            ) >> ${GITHUB_STEP_SUMMARY}
            if [ "${MERGE_STATUS}" == "conflict" ]; then
              (
                echo "## Merge Conflicts"
                echo "Unable to automatically merge due to conflicts."
                echo "Manual intervention required."
              ) >> ${GITHUB_STEP_SUMMARY}
            fi
          fi
 